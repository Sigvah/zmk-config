/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "keys_nb_osx.h"
#include "keys_nb_win.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT_L 0
#define SYMBOLS_L 1
#define ARROWS_L  2
#define NUMBERS_L 3
#define MOUSE_L 4
#define DEFAULT_L_WIN 5
#define SYMBOLS_L_WIN 6
#define ARROWS_L_WIN  7
#define NUMBERS_L_WIN 8
#define SHORTCUT_L_WIN 9

&caps_word { continue-list = <NB_UNDERSCORE NB_MINUS WNB_UNDERSCORE WNB_MINUS>; };

/ {
    combos {
        compatible = "zmk,combos";

        combo_ques {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&ques_excl>;
        };

        aa {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <31 32>;
        };

        ae {
            bindings = <&kp APOS>;
            key-positions = <3 4>;
        };

        oe {
            bindings = <&kp SEMI>;
            key-positions = <27 28>;
        };

        combo_lpar {
            bindings = <&kp NB_LPAR>;
            key-positions = <9 8>;
        };

        combo_rpara {
            bindings = <&kp NB_RPAR>;
            key-positions = <32 33>;
        };

        combo-lcurl {
            bindings = <&kp NB_RBRC>;
            key-positions = <2 3>;
        };

        combo_rcurl {
            bindings = <&kp NB_RBRC>;
            key-positions = <26 27>;
        };

        combo_at {
            bindings = <&kp NB_AT>;
            key-positions = <3 8>;
        };
    };
};

/ {
    behaviors {
        hml: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <6 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 36 37 38>;
            hold-trigger-on-release;
        };

        thb: thumb_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
        };

        thb2: thumb_mods_layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            flavor = "hold-preferred";
            bindings = <&mo>, <&kp>;
        };

        apos_dqt: quot_doublequot {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp NB_APOS>, <&kp NB_DQT>;

            label = "quotus";
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ques_excl: questionmark_exlamation_mark {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp NB_QMARK>, <&kp NB_EXCL>;

            label = "questius";
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            label = "HMR";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 39 40 41>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp TAB  &kp Q  &kp W  &kp E      &kp R        &kp T      &kp Y      &kp U     &kp I      &kp O    &kp P      &kp LBKT
&kp ESC  &kp A  &kp S  &kp D      &kp F        &kp G      &kp H      &kp J     &kp K      &kp L    &kp SEMI   &kp APOS
&kp LT   &kp Z  &kp X  &kp C      &kp V        &kp B      &kp N      &kp M     &kp COMMA  &kp DOT  &kp MINUS  &kp LGUI
                       &kp LCTRL  &lt 1 SPACE  &kp TAB    &kp ENTER  &kp BSPC  &kp LALT
            >;
        };

        num {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans    &trans  &kp N7  &kp N8  &kp N9  &trans  &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans    &trans  &kp N4  &kp N5  &kp N6  &trans  &trans
&trans  &trans    &trans    &trans     &trans     &trans    &trans  &kp N1  &kp N2  &kp N3  &trans  &trans
                            &trans     &trans     &trans    &trans  &kp N0  &trans
            >;
        };

        layer_12 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp F7  &kp F8  &kp F9  &kp F12  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp F4  &kp F5  &kp F6  &kp F11  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp F1  &kp F2  &kp F3  &kp F10  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        layer_13 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
