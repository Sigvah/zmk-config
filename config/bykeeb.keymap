/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200
#define ZMK_POINTING_DEFAULT_SCRL_VAL 15

#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define NAVI 1
#define MOUS 2
#define NUMB 3
#define FUNC 4
#define SYST 5
 
#define MOD_MORPH(NAME, NORMAL, MODDED, MODS) \
  mm_##NAME: NAME { \
    compatible = "zmk,behavior-mod-morph"; \
    #binding-cells = <0>; \
    bindings = <&kp NORMAL>, <&kp MODDED>; \
    mods = <MODS>; \
  };

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

&sk {
    release-after-ms = <750>;
};

&lt {
    tapping-term-ms = <150>;
};

&mmv {
    x-input-code = <INPUT_REL_X>;
    y-input-code = <INPUT_REL_Y>;
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <2>;
};

/ {

    behaviors {
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <500>;
            quick-release;
            ignore-modifiers;
        };
        hml: homerow_modsl {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <175>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29>;
            hold-trigger-on-release;
        };
        hmr: homerow_modsr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <175>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24>;
            hold-trigger-on-release;
        };
        sft_caps: shift_capsword {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <175>;
            bindings = <&skq LSHIFT>, <&caps_word>;
        };

        MOD_MORPH(csemi, COMMA, SEMI, (MOD_LSFT|MOD_RSFT))
        MOD_MORPH(dcoln, DOT, COLON, (MOD_LSFT|MOD_RSFT))
        MOD_MORPH(lparlt, LPAR, LT, (MOD_LSFT|MOD_RSFT))
        MOD_MORPH(rpargt, RPAR, GT, (MOD_LSFT|MOD_RSFT))

        hmr_c: homerowmod_commasemi {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&mm_csemi>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <175>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24>;
            hold-trigger-on-release;
        };
        hmr_d: homerowmod_dotcolon {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&mm_dcoln>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <175>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24>;
            hold-trigger-on-release;
        };
        swap_next: swap_next {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
            timeout-ms = <1500>;
        };
        swap_prev: swap_prev {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp LS(TAB)>, <&kt LALT>;
            timeout-ms = <1500>;
        };
        num_fun: num_function {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&mo NUMB>, <&mo FUNC>;
        };
        nav_mou: navi_mouse {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&mo NAVI>, <&mo MOUS>;
        };
        blconfirm: bootloader_confirmation {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&none>, <&bootloader>;
        };
    };

    combos {
        #include "combos.overlay"
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NAVI NUMB>;
            then-layer = <SYST>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
        bindings = <
            &kp Q         &kp W         &kp F         &kp P         &kp B                    &kp J         &kp L         &kp U         &kp Y         &kp SQT
            &kp A         &kp R         &kp S         &kp T         &kp G                    &kp M         &kp N         &kp E         &kp I         &kp O
            &hml LGUI Z   &hml LALT X   &hml LCTL C   &hml LSHIFT D &kp V                    &kp K         &hmr RSHIFT H &hmr_c RCTL 0 &hmr_d RALT 0 &hmr RGUI FSLH
                                        &num_fun      &sft_caps     &kp BSPC                 &kp ENTER     &kp SPACE     &nav_mou
        >;
        };

        navi_layer {
        bindings = <
            &kp INS       &kp HOME      &kp UP        &kp END       &kp PG_UP                &kp K_APP     &swap_next    &swap_prev    &none         &blconfirm
            &kp LC(A)     &kp LEFT      &kp DOWN      &kp RIGHT     &kp PG_DN                &kp C_VOL_UP  &kp C_PREV    &kp C_PP      &kp C_NEXT    &kp C_STOP
            &kp LC(Z)     &kp LC(X)     &kp LC(C)     &kp LC(V)     &kp LC(Y)                &kp C_VOL_DN  &kp RSHIFT    &kp RCTRL     &kp RALT      &kp RGUI
                                        &trans        &trans        &kp DEL                  &trans        &trans        &trans
            >;
        };

        mouse_layer {
        bindings = <
            &none         &mkp MB2      &mmv MOVE_UP  &mkp MB1      &msc SCRL_UP             &kp K_APP     &swap_next    &swap_prev    &none         &blconfirm
            &none         &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &msc SCRL_DOWN       &kp C_VOL_UP  &kp C_PREV    &kp C_PP      &kp C_NEXT    &kp C_STOP
            &none         &mkp MB5      &mkp MB3      &mkp MB4      &none                    &kp C_VOL_DN  &kp RSHIFT    &kp RCTRL     &kp RALT      &kp RGUI
                                        &trans        &trans        &trans                   &trans        &trans        &trans
            >;
        };

        numb_layer {
        bindings = <
            &blconfirm    &none         &none         &none         &none                   &kp EQUAL     &kp N7        &kp N8        &kp N9        &kp DOT
            &none         &none         &none         &none         &none                   &kp PLUS      &kp N4        &kp N5        &kp N6        &kp ASTRK
            &kp LGUI      &kp LALT      &kp LCTL      &kp LSHIFT    &none                   &kp MINUS     &kp N1        &kp N2        &kp N3        &kp FSLH
                                        &trans        &trans        &trans                  &trans        &trans        &lt NAVI N0
        >;
        };

        func_layer {
        bindings = <
            &none         &none         &none         &none         &none                    &none         &kp F7        &kp F8       &kp F9        &kp F12
            &none         &none         &none         &none         &none                    &none         &kp F4        &kp F5       &kp F6        &kp F11
            &kp LGUI      &kp LALT      &kp LCTL      &kp LSHIFT    &none                    &none         &kp F1        &kp F2       &kp F3        &kp F10
                                        &trans        &trans        &trans                   &trans        &trans        &none
        >;
        };

        syst_layer {
        bindings = <
            &bootloader   &sys_reset    &none         &none         &out OUT_BLE             &out OUT_USB  &none         &none         &sys_reset    &bootloader
            &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &none                    &none         &bt BT_CLR    &none         &none         &none
            &bt BT_DISC 0 &bt BT_DISC 1 &bt BT_DISC 2 &bt BT_DISC 3 &none                    &none         &none         &none         &none         &none
                                        &trans        &trans        &trans                   &trans        &trans        &trans
        >;
        };
    };
};